{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"DynareJulia User Guide","text":"<p>Welcome to DynareJulia User Guide. This guide is designed to help users get started, understand the workflow, and fully leverage the capabilities of DynareJulia.</p>"},{"location":"#what-is-dynarejulia","title":"What is DynareJulia?","text":"<p>DynareJulia is a high-performance, modern, and flexible framework for solving, simulating, and analyzing dynamic economic models \u2014 written in Julia, and inspired by the powerful features of Dynare and the computational speed of Julia.</p> <p>It is especially useful for researchers, economists, and policy analysts who need to:</p> <ul> <li>Solve DSGE, OLG, and other structural models</li> <li>Run simulations and perform sensitivity analysis</li> <li>Customize model components using Julia's extensive scientific ecosystem</li> </ul>"},{"location":"#resources","title":"Resources","text":"<ul> <li> <p>\ud83d\udd17 Main GitHub Repository: DynareJulia/Dynare.jl   Browse the codebase, contribute, or report issues.</p> </li> <li> <p>\ud83d\udcd8 Official Documentation: DynareJulia Documentation   Explore API details, examples, and model syntax.</p> </li> </ul>"},{"location":"#latest-version","title":"Latest Version","text":"<p>The current version of DynareJulia is: <code>v0.9.18</code></p> <p>(For installation instructions, visit the Installation page.)</p>"},{"location":"#whats-in-this-guide","title":"What's in this Guide?","text":"<p>Use the navigation bar to explore topics such as:</p> <ul> <li>\u2705 Getting Started</li> <li>\u2699\ufe0f Installation &amp; Setup</li> <li>\ud83d\udcc8 Basic &amp; Advanced Usage</li> <li>\ud83d\udca1 Examples and Error Handling</li> <li>\u2753 FAQ</li> </ul> <p>Happy modeling!</p>"},{"location":"endocred/","title":"ENDOCRED Model Simulations","text":"<p>ENDOCRED (Endogenous Credibility) is a macroeconomic modeling framework that explicitly incorporates credibility dynamics into monetary policy decisions. It is widely used at central banks around the world, and in particulat, at the central banks that adopted prudent risk-management approach to monetary policy (FPAS MARK II) for forecasting and policy analysis.</p>"},{"location":"endocred/#brief-introduction-to-endocred","title":"Brief Introduction to ENDOCRED","text":"<p>Why ENDOCRED?</p> <ul> <li>Traditional FPAS models assume fixed policy credibility, often unrealistic during uncertain periods.</li> <li>ENDOCRED addresses this by allowing public trust in the central bank to evolve endogenously over time.</li> <li>It is especially relevant in contexts like post-pandemic inflation, where expectations, communication, and policy strength interact nonlinearly.</li> </ul>"},{"location":"endocred/#key-features-of-the-endocred-framework","title":"Key Features of the ENDOCRED Framework","text":"<ul> <li>Endogenous Credibility Process: Expectations react dynamically to how well the central bank achieves its objectives.</li> <li>Two Inflation Regimes:</li> <li>A credible regime (expectations anchored at 2%)</li> <li>A high-inflation regime (persistent, drifting expectations)</li> <li>Nonlinear Phillips Curve: The effect of output gaps on inflation intensifies in high-pressure economies.</li> <li>Loss Function Approach: The model minimizes a central bank\u2019s loss function instead of assuming a fixed interest rate rule.</li> <li>DynareJulia Implementation: Fully implemented in open-source tools for fast policy simulation and transparency.</li> </ul>"},{"location":"endocred/#policy-simulations-and-scenarios","title":"Policy Simulations and Scenarios","text":"<p>The model supports scenario-based decision-making using cases such as:</p> <ul> <li>Case A (Hawkish): Persistent inflation, requires strong policy tightening.</li> <li>Case B (Dovish): Inflation is transitory, calls for mild adjustment.</li> <li>Case X (Tail Risk): Stagflation or geopolitical shocks.</li> </ul> <p>Alternative Paths for the Policy Rate </p>"},{"location":"endocred/#credibility-metrics","title":"Credibility Metrics","text":"<p>The framework introduces two empirical indicators:</p> <ul> <li>CBSPII: Central Bank Sticky Price Inflation Indicator (e.g., based on Atlanta Fed sticky CPI)</li> <li>CBCSI: Central Bank Credibility Stock Index</li> </ul> <p>These help calibrate credibility loss and track its macroeconomic effects.</p>"},{"location":"endocred/#key-takeaways","title":"Key Takeaways","text":"<ul> <li>Credibility is a dynamic asset, not a fixed assumption.</li> <li>Delays in tightening can lead to self-fulfilling inflation traps.</li> <li>Models must account for expectation shifts in response to communication and action.</li> <li>ENDOCRED helps to think about and model \u201cdark corners\u201d of monetary policy \u2014 such as stagflation, delayed disinflation, or excessive tightening.</li> </ul> <p>\ud83d\udcd6 \"In times of incredible uncertainty... a failure to act quickly, aggressively, and flexibly can lead to a very costly loss of credibility.\" \u2014 Kostanyan et al., 2022</p>"},{"location":"endocred/#model-codes-in-dynarejulia","title":"Model Codes in DynareJulia","text":"<p>These are the model and script files:</p> <ul> <li><code>MARKET_2025Q1.mod</code></li> <li><code>Case_A_2025Q1.mod</code></li> <li><code>Case_B_2025Q1.mod</code></li> <li><code>SCENARIOS_2025Q1.jl</code></li> </ul> <p>Download them and place all four in the same project directory.</p>"},{"location":"endocred/#how-to-run","title":"\u25b6\ufe0f How to Run","text":"<ol> <li>Activate your project environment (or create one):</li> </ol> <pre><code>using Pkg\nPkg.activate(\"venv\")  # or your preferred environment path\n</code></pre>"},{"location":"endocred/#key-references","title":"Key References","text":"<p>The following academic and policy-oriented references are essential to understanding the theoretical foundation of ENDOCRED, credibility-driven forecasting, and risk-based monetary policy.</p> <ul> <li> <p>Laxton, D., Galstyan, M., &amp; Avagyan, V. (2024) Prudent Risk Management Approach to Monetary Policy   Central Bank of Armenia, forthcoming.   Download here</p> </li> <li> <p>Adrian, T., Laxton, D., &amp; Obstfeld, M. (Eds.) (2018) Frontiers of Monetary Policy Making   International Monetary Fund.   Download here</p> </li> <li> <p>Kostanyan, A., Matinyan, A., &amp; Papikyan, A. (2022) Getting FIT with Imperfect Policy Credibility    DYNARE/JULIA Workshops with an Application for the US  Economy (2022)   Central Bank of Armenia.   Download here</p> </li> <li> <p>Kostanyan, A., Matinyan, A., &amp; Papikyan, A. (2022) Getting FIT with Imperfect Policy Credibility:   DYNARE/JULIA Workshops with an Application for a Small Open Economy   Central Bank of Armenia.   Download here</p> </li> <li> <p>Laxton, D., Igityan, H., &amp; Mkhatrishvili, S. (2024) Adapting Monetary Policy Frameworks for Risk Management   Forthcoming in the Oxford Review of Economic Policy.   Download here</p> </li> <li> <p>Clinton, K., Hl\u00e9dik, T., Holub, T., Laxton, D., &amp; Wang, H. (2017) Czech Magic: Implementing Inflation-Forecast Targeting at the CNB   IMF Working Paper 17/21.   Download here</p> </li> <li> <p>Laxton, D., Freedman, C., Kumhof, M., Laxton, J., Muir, D., Mursula, S., &amp; Wang, H. (2015) Adding the Exchange Rate as a Tool to Combat Deflationary Risks in the Czech Republic   IMF Working Paper 15/74.   Download here</p> </li> <li> <p>Greenspan, A. (2003) Monetary Policy under Uncertainty   Jackson Hole Symposium Speech.    Download here</p> </li> <li> <p>Bernanke, B. (2024) Forecasting for Monetary Policy Making and Communication: A Review   Bank of England.    Download here</p> </li> </ul> <p>Further Reading &amp; Transparency Reports - The Better Policy Project \u2013 Research Papers - Central Bank of Armenia \u2013 Transparency Report Q4 2024</p>"},{"location":"endocred/#video-tutorials","title":"\ud83c\udfa5 Video Tutorials","text":"<p>Check out ENDOCRED framework in action through a full video lecture series and real-world applications.</p> The Endogenous Policy Credibility Model Real-World Applications of ENDOCRED ENDOCRED - Abstract 1. Introduction 2. Development of Credibility-Focused Models 3. The Multi-Country Gap Model 4. Non-linear ENDOCRED 5. The Future of Monetary Policy Frameworks 6. FPAS MARK II and ENDOCRED ENDOCRED Handbook \u2013 Conclusion"},{"location":"faq/","title":"Frequently Asked Questions (FAQ)","text":"Who should I contact for questions, collaboration, or training?  For any questions about using DynareJulia, contributing to the project, or organizing training sessions and workshops, please contact:   Asya Kostanyan \u2013 asyakostanyan@thebetterpolicyproject.org Is training available for DynareJulia?  Yes! We offer ongoing training opportunities through The Better Policy Project, including:  <ul> <li>Introductory courses on DynareJulia and macroeconomic modeling</li> <li>Hands-on workshops on scenario analysis, ENDOCRED, and DSGE models</li> <li>Custom trainings for central banks and research teams</li> </ul>  To schedule a session, contact asyakostanyan@thebetterpolicyproject.org.   What is DynareJulia?  DynareJulia is an open-source modeling engine written in Julia that builds on the well-established Dynare for MATLAB/Octave framework.   It supports solving, simulating, and analyzing macroeconomic models written in <code>.mod</code> files \u2014 including support for perfect foresight, stochastic simulations, and modular frameworks like ENDOCRED.   How is this different from Dynare (MATLAB version)?  DynareJulia reimplements many of the core features of Dynare in pure Julia, which offers:  <ul> <li>Faster performance</li> <li>Better modularity and flexibility</li> <li>Full integration with Julia packages like <code>Plots.jl</code> and <code>DataFrames.jl</code></li> <li>No need for MATLAB licenses</li> </ul>  Some advanced Dynare features are still being implemented.   Is this only for advanced users?  No! DynareJulia is suitable for:  <ul> <li>Beginners learning DSGE modeling</li> <li>Central banks using FPAS frameworks</li> <li>Advanced researchers working with nonlinear, modular, or multi-country models</li> </ul> Is DynareJulia free?  Yes. DynareJulia is 100% free and open source \u2014 and it will remain that way.   You can use it, modify it, and redistribute it under a permissive license.   What is PythonDynareJulia? PythonDynareJulia is an upcoming project under development that provides a Python-based frontend for DynareJulia.  It will allow users to:  <ul> <li>Run and simulate <code>.mod</code> files directly from Python</li> <li>Use Jupyter notebooks or GUI-like interfaces</li> <li>Visualize results using Python libraries like <code>matplotlib</code> or <code>pandas</code></li> </ul>  More details coming soon.   What features are currently supported? <ul> <li>Solving DSGE and perfect foresight models</li> <li>Using the <code>@dynare</code> macro or <code>Dynare.run_model()</code></li> <li>Visualizing impulse response functions</li> <li>Running multiple model scenarios</li> <li>Integrating with Julia scripting for advanced workflows</li> </ul> Is this a final release?  No. DynareJulia is actively under development.   New features like estimation, nonlinear solvers, and advanced diagnostics are in progress.   Can I contribute?  Yes! We welcome contributions:  <ul> <li>Share your models and use cases</li> <li>Improve documentation and tutorials</li> <li>Report issues or suggest features on GitHub</li> <li>Help expand functionality</li> </ul> Where can I learn more?  Explore these pages:  <ul> <li>Video Tutorials</li> <li>Simple Model Walkthrough</li> <li>ENDOCRED Use Case</li> <li>Research Papers</li> </ul>  Also check out:  <ul> <li>DynareJulia GitHub Repository</li> <li>DynareJulia Documentation</li> </ul> <p>For anything else, reach out to asyakostanyan@thebetterpolicyproject.org</p>"},{"location":"getting-started/","title":"Getting Started with DynareJulia","text":"<p>This section will walk you through installing Julia \u2014 the foundational language for running DynareJulia.</p>"},{"location":"getting-started/#step-1-download-julia","title":"Step 1: Download Julia","text":"<p>DynareJulia currently requires Julia version 1.9.4 for compatibility and performance reasons.</p> <p>\ud83d\udee0\ufe0f You must install version 1.9.4, not the latest version.</p> <p>To download it:</p> <p>\ud83d\udc49 Visit the Julia Old Releases Page</p> <p>Then scroll down to find:  Version 1.9.4 (released on 2023-12-21)</p> <p>Select the appropriate installer based on your operating system:</p>"},{"location":"getting-started/#for-windows","title":"\ud83d\udcbb For Windows","text":"<ul> <li>Click on: <code>julia-1.9.4-win64.exe</code> (or <code>julia-1.9.4-win32.exe</code> if using 32-bit)</li> <li>Run the installer</li> <li>Accept default settings (you can check \u201cAdd Julia to PATH\u201d if available)</li> </ul>"},{"location":"getting-started/#for-macos","title":"\ud83c\udf4e For macOS","text":"<ul> <li>Click on: <code>julia-1.9.4-mac64.dmg</code></li> <li>Open the <code>.dmg</code> file and drag Julia into your <code>Applications</code> folder</li> </ul>"},{"location":"getting-started/#for-linux","title":"\ud83d\udc27 For Linux","text":"<ul> <li>Download the <code>julia-1.9.4-linux-x86_64.tar.gz</code></li> <li>Extract it using your terminal</li> </ul>"},{"location":"getting-started/#step-2-testing","title":"Step 2: Testing","text":"<p>Step 3: Install Visual Studio Code (VS Code)</p> <p>Visual Studio Code (VS Code) is a lightweight and powerful code editor. We recommend it for writing and managing Julia code, editing <code>.mod</code> model files, and building this documentation.</p>"},{"location":"getting-started/#download-vs-code","title":"\ud83d\udce5 Download VS Code","text":"<ol> <li>Go to the official VS Code download page</li> <li>Choose your operating system:</li> <li>Windows: Click on the <code>.exe</code> installer</li> <li>macOS: Choose the <code>.zip</code> or <code>.dmg</code> version</li> <li>Linux: Download the <code>.deb</code> or <code>.rpm</code> file</li> </ol>"},{"location":"getting-started/#install-instructions-by-os","title":"\ud83d\udcbb Install Instructions by OS","text":""},{"location":"getting-started/#windows","title":"\ud83d\udcbb Windows","text":"<ul> <li>Run the downloaded <code>.exe</code> file</li> <li>During setup:</li> <li>\u2705 Enable \u201cAdd to PATH\u201d</li> <li>\u2705 Enable \u201cOpen with Code\u201d in the right-click context menu</li> <li>Complete the installation by clicking Next through the installer</li> </ul>"},{"location":"getting-started/#macos","title":"\ud83c\udf4e macOS","text":"<ul> <li>Open the downloaded <code>.dmg</code> file</li> <li>Drag the Visual Studio Code icon into your <code>Applications</code> folder</li> <li>Open VS Code from the Applications menu or using Spotlight (<code>Cmd + Space</code>, then type \"Code\")</li> </ul>"},{"location":"getting-started/#step-4-install-the-julia-extension-in-vs-code","title":"Step 4: Install the Julia Extension in VS Code","text":"<p>To enable full Julia support in VS Code \u2014 including syntax highlighting, interactive REPL, inline plots, variable browser, and more \u2014 you need to install the official Julia extension.</p>"},{"location":"getting-started/#41-how-to-install-the-julia-extension","title":"4.1 How to Install the Julia Extension","text":"<ol> <li>Open Visual Studio Code</li> <li>Click on the Extensions icon in the left sidebar (or press <code>Ctrl+Shift+X</code>)</li> <li> <p>In the search bar at the top, type: Julia</p> </li> <li> <p>Look for the extension published by Julia Language \u2014 it should appear first in the list</p> </li> <li> <p>Name: Julia</p> </li> <li> <p>Publisher: Julia Language</p> </li> <li> <p>Click the Install button</p> </li> </ol>"},{"location":"getting-started/#42-first-time-setup","title":"4.2 First-Time Setup","text":"<p>After installing the extension:</p> <ol> <li>Open a Julia file, or click <code>View \u2192 Command Palette</code> (<code>Ctrl+Shift+P</code>)</li> <li>Type: Execute Active File</li> <li>VS Code will prompt you to select the Julia executable path (if it doesn't auto-detect it)</li> <li> <p>Browse to the path where Julia 1.9.4 is installed:</p> </li> <li> <p>On Windows (default):</p> </li> </ol> <pre><code>C:\\Users\\&lt;YourUsername&gt;\\AppData\\Local\\Programs\\Julia-1.9.4\\bin\\julia.exe\n</code></pre> <ul> <li>On macOS:</li> </ul> <pre><code>/Applications/Julia-1.9.app/Contents/Resources/julia/bin/julia\n</code></pre> <ul> <li>On Linux (if installed via tarball):</li> </ul> <pre><code>/opt/julia-1.9.4/bin/julia\n</code></pre> <ol> <li>Select the correct path \u2192 the extension will configure automatically</li> </ol>"},{"location":"getting-started/#verify-julia-repl-integration","title":"\u2705 Verify Julia REPL Integration","text":"<p>To check if it's working:</p> <ol> <li>Create a new file and save it as <code>test.jl</code></li> <li>Add:</li> </ol> <p>println(\"Hello from Julia in VS Code!\")</p>"},{"location":"gimf/","title":"examples","text":"<p>This page is under construction.</p>"},{"location":"installation/","title":"Installation","text":"<p>This section explains how to install the necessary components to use DynareJulia, starting with setting up a Python virtual environment and preparing to install Dynare.</p>"},{"location":"installation/#step-1-set-up-a-virtual-environment","title":"Step 1: Set Up a Virtual Environment","text":"<p>Before installing Dynare, it's recommended to create a virtual environment (venv) inside the folder where your model files will be stored.</p>"},{"location":"installation/#what-is-a-virtual-environment","title":"What is a Virtual Environment?","text":"<p>A virtual environment is an isolated workspace that keeps your project's dependencies (such as Python packages or Dynare wrappers) separate from your system-wide configuration.</p> <p>Using a venv helps: - Keep each modeling project self-contained - Avoid conflicts with other tools or versions - Improve reproducibility when sharing your setup</p>"},{"location":"installation/#11-create-a-project-folder","title":"1.1 Create a project folder","text":"<p>Create a directory where your <code>.mod</code> files and Julia scripts will live: activate venv</p>"},{"location":"installation/#step-2-install-dynare-in-julia","title":"Step 2: Install Dynare in Julia","text":"<p>Once your virtual environment is ready and Julia is installed, the next step is to install the Dynare.jl package using Julia\u2019s package manager.</p>"},{"location":"installation/#21-open-the-julia-repl","title":"2.1 Open the Julia REPL","text":"<p>There are two ways to launch the Julia REPL:</p>"},{"location":"installation/#option-a-from-your-system-terminal","title":"Option A: From your system terminal","text":"<p>Simply type:</p> <pre><code>julia\n</code></pre>"},{"location":"installation/#option-b-from-inside-visual-studio-code","title":"Option B: From inside Visual Studio Code","text":"<ol> <li>Press <code>Ctrl + Shift + P</code> (or <code>Cmd + Shift + P</code> on macOS)</li> <li>In the Command Palette, type:</li> <li>Press <code>Enter</code> VS Code will open a terminal panel with the Julia REPL running.</li> </ol>"},{"location":"installation/#22-add-the-dynarejl-package","title":"2.2 Add the Dynare.jl package","text":"<p>Once the REPL is open, enter the following commands:</p> <pre><code>using Pkg\nPkg.add(\"Dynare\")\n</code></pre>"},{"location":"installation/#23-first-time-use","title":"2.3 First-Time Use","text":"<p>After installing Dynare.jl, test that the package loads correctly.</p> <p>In the Julia REPL, type:</p> <pre><code>using Dynare\n</code></pre> <p>Note: The first time you use the package, Julia will precompile it. This may take a minute.</p> <p>Recommendation: After installing packages, it is good practice to restart your Julia REPL or VS Code terminal. This ensures that all changes take effect properly, especially when adding new packages or changing environments.</p>"},{"location":"installation/#24-optional-check-the-installed-version","title":"2.4 Optional: Check the Installed Version","text":"<p>To verify which version of Dynare was installed, run:</p> <pre><code>Pkg.status(\"Dynare\")\n</code></pre> <p>You should see an output like:</p> <pre><code>Dynare v0.9.18\n</code></pre> <p>This confirms the package is installed and active in your Julia environment.</p>"},{"location":"installation/#25-install-required-julia-packages-for-modeling","title":"2.5 Install Required Julia Packages for Modeling","text":"<p>In addition to <code>Dynare</code>, you will need several additional Julia packages for typical modeling workflows:</p> <ul> <li><code>PATHSolver</code> \u2014 used for solving models with complementarity conditions</li> <li><code>DataFrames</code> \u2014 for structured data manipulation</li> <li><code>Dates</code> \u2014 to handle time-based elements like periods or ranges</li> <li><code>Plots</code> \u2014 for generating charts and visualizations</li> </ul>"},{"location":"installation/#step-1-launch-julia","title":"Step 1: Launch Julia","text":"<p>In your terminal, start Julia by typing:</p> <pre><code>julia\n</code></pre>"},{"location":"installation/#step-2-install-the-required-packages","title":"Step 2: Install the required packages","text":"<p>Once the Julia REPL opens, run the following commands: <pre><code>using Pkg\nPkg.add([\n    \"PATHSolver\",\n    \"DataFrames\",\n    \"Dates\",\n    \"Plots\"\n])\n</code></pre></p>"},{"location":"installation/#step-3-test-the-installation","title":"Step 3: Test the installation","text":"<p>To verify that everything is working, enter: <pre><code>using PATHSolver, DataFrames, Dates, Plots\n</code></pre></p>"},{"location":"installation/#26-configure-the-path-license","title":"2.6 Configure the PATH License","text":"<p>Dynare uses the PATH solver by S. Dirkse, M.C. Ferris, and T. Munson \u2014 as accessed through <code>PATHSolver.jl</code> \u2014 to solve perfect foresight models with occasionally binding constraints.</p> <p>To use it, you need to register the free license key in your Julia startup file.</p>"},{"location":"installation/#1-obtain-the-license","title":"1. Obtain the license","text":"<p>The license is publicly available at:</p> <p>https://pages.cs.wisc.edu/~ferris/path/LICENSE</p> <p>For convenience, here is the license string: setenv PATH_LICENSE_STRING \"2830898829&amp;Courtesy&amp;&amp;&amp;USR&amp;45321&amp;5_1_2021&amp;1000&amp;PATH&amp;GEN&amp;31_12_2025&amp;0_0_0&amp;6000&amp;0_0\"</p>"},{"location":"installation/#2-add-the-license-to-your-startupjl-file","title":"2. Add the license to your <code>startup.jl</code> file","text":"<p>Create a file named <code>startup.jl</code> and add the following line:</p> <pre><code>ENV[\"PATH_LICENSE_STRING\"] = \"2830898829&amp;Courtesy&amp;&amp;&amp;USR&amp;45321&amp;5_1_2021&amp;1000&amp;PATH&amp;GEN&amp;31_12_2025&amp;0_0_0&amp;6000&amp;0_0\"\n</code></pre>"},{"location":"installation/#instructions-by-platform","title":"Instructions by Platform","text":""},{"location":"installation/#windows-file-explorer-method","title":"\ud83d\udcbb Windows (File Explorer method)","text":"<ol> <li>Open File Explorer and go to your user folder (e.g., <code>C:\\Users\\YourName</code>).</li> <li>Navigate to the <code>.julia</code> folder and create a new folder named <code>config</code> if it doesn't already exist.</li> <li>Inside <code>.julia\\config</code>, create a new text file:</li> <li>Right-click \u2192 New \u2192 Text Document</li> <li>Open the new file and paste the following line:</li> </ol> <pre><code>ENV[\"PATH_LICENSE_STRING\"] = \"2830898829&amp;Courtesy&amp;&amp;&amp;USR&amp;45321&amp;5_1_2021&amp;1000&amp;PATH&amp;GEN&amp;31_12_2025&amp;0_0_0&amp;6000&amp;0_0\"\n</code></pre> <ol> <li>Save the file:</li> <li>Go to File \u2192 Save As</li> <li>In Save as type, choose All Files</li> <li>In File name, type: <code>startup.jl</code></li> <li>Click Save</li> </ol>"},{"location":"installation/#macos-linux-terminal-method","title":"\ud83c\udf4e macOS / Linux (terminal method)","text":"<ol> <li>Open a terminal.</li> <li>Create the Julia config folder if it doesn't exist: <code>bash mkdir -p ~/.julia/config</code></li> <li>Open the <code>startup.jl</code> file in your preferred text editor (e.g., nano, vim, or VS Code): <code>bash nano ~/.julia/config/startup.jl</code></li> <li>Paste this line into the file: <code>julia ENV[\"PATH_LICENSE_STRING\"] = \"2830898829&amp;Courtesy&amp;&amp;&amp;USR&amp;45321&amp;5_1_2021&amp;1000&amp;PATH&amp;GEN&amp;31_12_2025&amp;0_0_0&amp;6000&amp;0_0\"</code></li> <li>Save and close the file.</li> </ol>"},{"location":"potential-errors/","title":"potential errors","text":"<p>This page is under construction.</p>"},{"location":"simple-model/","title":"Simple Model","text":"<p>This page demonstrates how to run a basic macroeconomic model in DynareJulia using a <code>.mod</code> file and the <code>@dynare</code> macro.</p>"},{"location":"simple-model/#dynare-model-file-simplemod","title":"\ud83d\udcc4 Dynare Model File (<code>simple.mod</code>)","text":""},{"location":"simple-model/#download-the-model-file","title":"Download the Model File","text":"<p>Download <code>simple.mod</code></p> <pre><code>var PIE, R, Y;\n\nvarexo eps_Y;\n\nmodel;\n  PIE = 0.5*PIE(-1) + 0.5*PIE(+1) + 0.5*Y;\n  Y   = 0.5*Y(-1) + 0.5*Y(+1) - 0.2*R + eps_Y;\n  R   = 1.5*PIE(+1) + 0.2*Y;\nend;\n\nshocks;\n  var eps_Y; stderr 0.01;\nend;\n\ncheck;\n\nstoch_simul(order = 1, irf = 25);\n</code></pre> <p>Description:</p> <ul> <li><code>PIE</code>, <code>R</code>, and <code>Y</code> are endogenous variables.</li> <li><code>eps_Y</code> is an exogenous shock.</li> <li>The model has both forward- and backward-looking components.</li> <li>We use <code>stoch_simul</code> to simulate impulse response functions (IRFs).</li> </ul>"},{"location":"simple-model/#running-the-model-in-julia","title":"\u25b6\ufe0f Running the Model in Julia","text":"<p>Once you have <code>Dynare.jl</code> installed, you can run the model using the <code>@dynare</code> macro. This macro handles the entire process of parsing, solving, and simulating the model.</p> <p>In the terminal run:</p> <pre><code>using Dynare\n\ncontext = @dynare \"simple.mod\";\n</code></pre> <p>This will:</p> <ul> <li>Load and solve the model defined in <code>simple.mod</code></li> <li>Execute the <code>stoch_simul</code> block for impulse response simulation</li> <li>Store all output and diagnostics in the <code>context</code> variable</li> </ul>"},{"location":"video-tutorials/","title":"Video Tutorials","text":"<p>Welcome to the DynareJulia video tutorials section. Click any thumbnail to watch on YouTube.</p> <p>\ud83d\udce5 Access Exclusive Course Materials To access exclusive DynareJulia course materials, please contact Asya Kostanyan at: asyakostanyan@thebetterpolicyproject.org</p>"},{"location":"video-tutorials/#the-past-present-and-future-of-dynare","title":"\ud83c\udfa5 The Past, Present and Future of DYNARE","text":"The Past, Present and Future of DYNARE"},{"location":"video-tutorials/#advances-in-dynarejulia","title":"\ud83c\udfa5 Advances in DynareJulia","text":"Advances in DynareJulia"},{"location":"video-tutorials/#dynarejulia-getting-started","title":"\ud83c\udfa5 DynareJulia | Getting Started","text":"DynareJulia | Getting Started"},{"location":"video-tutorials/#installation-of-julia-and-dynare","title":"\ud83c\udfa5 Installation of Julia and Dynare","text":"Installation of Julia and Dynare"},{"location":"video-tutorials/#policy-relevant-macro-modeling-applications","title":"\ud83c\udfa5 Policy-Relevant Macro Modeling Applications","text":"Policy-Relevant Macro Modeling Applications"},{"location":"video-tutorials/#macroeconomic-modeling-in-dynarejulia","title":"\ud83c\udfa5 Macroeconomic Modeling in DynareJulia","text":"Macroeconomic Modeling in DynareJulia"},{"location":"video-tutorials/#kalman-filter-in-dynarejulia","title":"\ud83c\udfa5 Kalman Filter in DynareJulia","text":"Kalman Filter in DynareJulia"},{"location":"video-tutorials/#kalman-filter-in-dynarejulia-by-asya-kostanyan","title":"\ud83c\udfa5 Kalman Filter in DynareJulia (By Asya Kostanyan)","text":"Kalman Filter in DynareJulia"}]}